# -*- coding: utf-8 -*-
"""RandomForest.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o60-OHWuol_sxQXkFoThDQ9rF9a5KiWd
"""

# -*- coding: utf-8 -*-
"""Random Forest para Classificação de Diabetes"""

# Bibliotecas para manipulação de dados e visualização
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Pré-processamento e modelagem
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier

# Métricas de avaliação
from sklearn.metrics import classification_report

# Caminho do arquivo CSV
file_path = '/content/drive/MyDrive/Datasets/diabetes.csv'

# Carregamento do dataset
try:
    df = pd.read_csv(file_path)
    print("Dados carregados com sucesso.")
except FileNotFoundError:
    print(f"ERRO: Arquivo não encontrado em: {file_path}")
    raise SystemExit("Verifique o caminho e monte o Google Drive corretamente.")

# Substituição de zeros inválidos por NaN
cols_to_fix = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
df[cols_to_fix] = df[cols_to_fix].replace(0, np.nan)

# Separação entre preditores e alvo
X = df.drop(columns='Outcome')
y = df['Outcome']

# Divisão em treino e teste com estratificação
X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)
print(f"Dados separados: Treino ({len(X_train)}), Teste ({len(X_test)}).")

# Imputação com mediana e padronização
imputer = SimpleImputer(strategy='median')
scaler = StandardScaler()

X_train = scaler.fit_transform(imputer.fit_transform(X_train))
X_test = scaler.transform(imputer.transform(X_test))

print("Pré-processamento concluído.")

# Modelo Random Forest (sem otimização)
model = RandomForestClassifier(random_state=42)
model.fit(X_train, y_train)
print("\nTreinamento concluído.")

# Previsão e avaliação
y_pred = model.predict(X_test)

print("="*50)
print("RELATÓRIO DE CLASSIFICAÇÃO - TESTE")
print("="*50)
print(classification_report(y_test, y_pred, target_names=['Não Diabetes (0)', 'Diabetes (1)']))

# Visualização da distribuição da variável alvo
plt.figure(figsize=(6, 4))
df['Outcome'].value_counts().plot(kind='bar', color=['skyblue', 'salmon'])
plt.title('Distribuição de Diagnóstico de Diabetes')
plt.xlabel('Diagnóstico')
plt.ylabel('Número de Pacientes')
plt.xticks(rotation=0)
plt.grid(axis='y', alpha=0.7)
plt.show()